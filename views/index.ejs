<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Todo List</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/css/bootstrap.min.css" rel="stylesheet"
          integrity="sha384-giJF6kkoqNQ00vy+HMDP7azOuL0xtbfIcaT9wjKHr8RbDVddVHyTfAAsrekwKmP1" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/vue@3/dist/vue.global.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
</head>
<body>
<nav class="navbar navbar-light bg-light">
    <div class="container-fluid">
        <a class="navbar-brand" href="#"><img class="logo" src="<%= userinfo.image %>" alt="">
            &nbsp; <%= userinfo.firstName %></a>
        <a class="navbar-brand btn btn-danger btn-small" style="color: white;" href="/auth/logout">Logout</a>
    </div>
</nav>

<div id="app" class="container mt-5">
    <h2>Your Todo List</h2>
    <button class="btn btn-primary mb-3" @click="showAddForm = true">Add Todo</button>

    <div v-if="showAddForm" class="mb-3">
        <h3>Add Todo</h3>
        <form @submit="addTodo">
            <div class="mb-3">
                <label for="title" class="form-label">Title</label>
                <input type="text" class="form-control" id="title" v-model="newTodo.title" required>
            </div>
            <div class="mb-3">
                <label for="description" class="form-label">Description</label>
                <textarea class="form-control" id="description" v-model="newTodo.description" required></textarea>
            </div>
            <div class="form-check mb-3">
                <input type="checkbox" class="form-check-input" id="complete" v-model="newTodo.complete">
                <label class="form-check-label" for="complete">Complete</label>
            </div>
            <button type="submit" class="btn btn-primary">Add Todo</button>
            <button type="button" class="btn btn-secondary" @click="showAddForm = false">Cancel</button>
        </form>
    </div>

    <ul class="list-group">
        <li v-for="todo in todos" :key="todo._id" class="list-group-item">
            <input type="checkbox" :checked="todo.complete" @change="toggleComplete(todo)">
            <!-- Checkbox for completeness -->
            <strong>{{ todo.title }}</strong>: {{ todo.description }}
            <button class="btn btn-sm btn-warning float-end" @click="editTodoForm(todo)">Edit</button>
            <button class="btn btn-sm btn-danger float-end me-2" @click="deleteTodo(todo)">Delete</button>
        </li>
    </ul>

    <div v-if="editFormVisible" class="mt-5">
        <h3>Edit Todo</h3>
        <form @submit="updateTodo">
            <div class="mb-3">
                <label for="edit-title" class="form-label">Title</label>
                <input type="text" class="form-control" id="edit-title" v-model="editTodo.title" required>
            </div>
            <div class="mb-3">
                <label for="edit-description" class="form-label">Description</label>
                <textarea class="form-control" id="edit-description" v-model="editTodo.description" required></textarea>
            </div>
            <div class="form-check mb-3">
                <input type="checkbox" class="form-check-input" id="edit-complete" v-model="editTodo.complete">
                <label class="form-check-label" for="edit-complete">Complete</label>
            </div>
            <button type="submit" class="btn btn-primary">Update Todo</button>
            <button type="button" class="btn btn-secondary" @click="editFormVisible = false">Cancel</button>
        </form>
    </div>


    <div>
        <h2>Balance</h2>
        <p>Cash: {{ balance.cash }}</p>
        <p>Bank: {{ balance.bank }}</p>

        <h2>Transactions</h2>
        <ul>
            <li v-for="transaction in transactions" :key="transaction._id">
                {{ transaction.date }} - {{ transaction.type }}: {{ transaction.amount }} - {{ transaction.description
                }}
            </li>
        </ul>

        <h3>Log a Transaction</h3>
        <form @submit="logTransaction">
            <label for="type">Type:</label>
            <select v-model="transactionType" required>
                <option value="income">Income</option>
                <option value="expense">Expense</option>
            </select>

            <label for="type">Method:</label>
            <select v-model="transactionMethod" required>
                <option value="bank">Bank</option>
                <option value="cash">Cash</option>
            </select>

            <label for="amount">Amount:</label>
            <input type="number" v-model="transactionAmount" required>

            <label for="description">Description:</label>
            <input type="text" v-model="transactionDescription" required>

            <button type="submit">Submit</button>
        </form>

    </div>

</div>

<script>
    const {createApp} = Vue;

    createApp({
        data() {
            return {
                balance: {
                    cash: 0,
                    bank: 0
                },
                transactions: [],
                transactionType: 'income',
                transactionMethod: 'bank',
                transactionAmount: 0,
                transactionDescription: '',

                user: <%- JSON.stringify(userinfo) %>, // Pass user info to Vue instance without escaping

                todos: [],
                newTodo: {title: '', description: '', complete: false},
                editTodo: {title: '', description: '', complete: false},
                showAddForm: false,
                editFormVisible: false
            };
        },
        created() {
            this.getTodos();
            this.getFinance();
        },
        methods: {
            async getTodos() {
                try {
                    const response = await axios.get('/api/todos');
                    this.todos = response.data;
                } catch (error) {
                    console.error(error);
                }
            },

            async logTransaction(event) {
                event.preventDefault(); // Prevent the default form submission behavior

                try {
                    const transactionData = {
                        method: this.transactionMethod,
                        amount: parseFloat(this.transactionAmount), // Ensure amount is a number
                        description: this.transactionDescription.trim() // Ensure description is trimmed
                    };

                    let res;
                    switch (this.transactionType) {
                        case 'income':
                            res = await axios.post('/api/finance/income', transactionData);
                            console.log("Income response:", res);
                            break;
                        case 'expense':
                            res = await axios.post('/api/finance/expense', transactionData);
                            console.log("Expense response:", res);
                            break;
                        default:
                            console.error("Invalid transaction type");
                            return;
                    }

                    // Fetch the latest finance data after logging a transaction
                    this.getFinance();

                    //clear the form
                    this.transactionType = 'income'; // or 'expense', depending on your default
                    this.transactionAmount = '';
                    this.transactionDescription = '';
                    console.log("balance", this.balance);
                } catch (err) {
                    console.error(err);
                }
            },

            async getFinance() {
                try {
                    const res = await axios.get('/api/finance');
                    this.balance = res.data.balance;
                    this.transactions = res.data.transactions;
                    console.log("trans", this.transactions)
                    console.log("balance", this.balance)
                } catch (err) {
                    console.error(err);
                }
            },

            async addTodo() {
                try {
                    const response = await axios.post('/api/todos', this.newTodo);
                    this.todos.push(response.data);
                    this.newTodo = {title: '', description: '', complete: false};
                    this.showAddForm = false;
                } catch (error) {
                    console.error(error);
                }
            },

            async deleteTodo(todo) {
                try {
                    await axios.delete(`/api/todos/${todo._id}`);
                    this.todos = this.todos.filter(t => t._id !== todo._id);
                } catch (error) {
                    console.error(error);
                }
            },

            editTodoForm(todo) {
                this.editTodo = {...todo};
                this.editFormVisible = true;
            },

            async updateTodo() {
                try {
                    const response = await axios.put(`/api/todos/${this.editTodo._id}`, this.editTodo);
                    const index = this.todos.findIndex(t => t._id === this.editTodo._id);
                    this.todos[index] = response.data;
                    this.editFormVisible = false;
                } catch (error) {
                    console.error(error);
                }
            },

            async toggleComplete(todo) {
                todo.complete = !todo.complete;
                try {
                    await axios.put(`/api/todos/${todo._id}`, todo);
                } catch (error) {
                    console.error(error);
                }
            }
        }
    }).mount('#app');
</script>

</body>
</html>




